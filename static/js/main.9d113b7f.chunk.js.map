{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","prop","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","fetchUrl","request","data","results","fetchData","className","title","map","movie","isLargeRow","src","poster_path","backdrop_path","alt","name","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","id","videoId","opts","height","width","playerVars","autoplay","APIKEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundPosition","backgroundImage","backgroundRepeat","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d113b7f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useEffect, useState } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row(prop) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl,setTrailerUrl] = useState('');\r\n    // snippet of code which runs based on a specific condition/variable\r\n   useEffect(()=>{\r\n    // if [], run once when the row loads, and don't run again.\r\n    async function fetchData(){\r\n        const request = await axios.get(prop.fetchUrl);\r\n        //htts://api.themoviedb.org/3/trending/all/week?api_key=${APIKEY}&language=en-US;\r\n        //console.log(request);\r\n\r\n        setMovies(request.data.results);\r\n        return request;\r\n    }\r\n\r\n    fetchData();\r\n   },[prop.fetchUrl]);\r\n\r\n   //console.log(movies);\r\n\r\n   const opts = {\r\n       height:\"390\",\r\n       width:\"100%\",\r\n       playerVars:{\r\n           //https://developers.google.com/youtube/player_parameters\r\n           autoplay:1,\r\n       }\r\n   }\r\n\r\n   const handleClick = (movie)=>{\r\n        if(trailerUrl)\r\n            setTrailerUrl('');\r\n        else\r\n            movieTrailer(movie?.name || \"\").then(url=>{\r\n                const urlParams = new URLSearchParams( new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            }).catch(error=>{\r\n                console.log(error);\r\n            })\r\n   }\r\n    return (\r\n        <div className=\"row\">\r\n            {/* title */}\r\n            <h2>{prop.title}</h2>\r\n\r\n            {/* Container->posters */}\r\n            <div className=\"row_posters\">\r\n                {/* several row_posters */}\r\n\r\n                {movies.map((movie)=>(\r\n                   <img \r\n                    className={`row_poster ${prop.isLargeRow && \"row_posterLarge\"}`} \r\n                    src={`${base_url}${prop.isLargeRow? movie.poster_path:movie.backdrop_path}`} \r\n                    alt={movie.name} \r\n                    key={movie.id}\r\n                    onClick={()=>handleClick(movie)}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row\r\n","const APIKEY = \"dd937f6d083ea4829581be5ac797c737\";\r\n\r\nconst requests = {\r\n    fetchTrending:`/trending/all/week?api_key=${APIKEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${APIKEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${APIKEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${APIKEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${APIKEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${APIKEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${APIKEY}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${APIKEY}&with_genres=99`\r\n};\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios'\r\nimport requests from './requests';\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie,setMovie] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n            request.data.results[Math.floor(Math.random()* request.data.results.length-1)]\r\n            ); // []\r\n            // >> Math.floor(Math.random()* request.data.results.length-1);\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n    },[]);\r\n\r\n    function truncate(str,n){\r\n        return str?.length> n ? str.substr(0,n-1)+ \"...\":str;\r\n    }\r\n    //console.log(movie);\r\n    return (\r\n            \r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize:\"cover\",\r\n                backgroundPosition:\"center center\",\r\n                backgroundImage:`linear-gradient(rgba(0,0,0,0.5),rgba(0,0,0,0.5)), url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n                backgroundRepeat:\"no-repeat\"\r\n            }}\r\n        >  {/* <<< Background images */}\r\n            <div className=\"banner_contents\">\r\n                {/* title */}\r\n                <h1 className=\"banner_title\">\r\n                  {movie?.title || movie?.name || movie?.original_name}  \r\n                </h1>\r\n\r\n\r\n                {/* div> 2 buttons */}\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>    \r\n                    <button className=\"banner_button\">My List</button>    \r\n                </div>\r\n\r\n                {/* descriptions */}\r\n                <h1 className=\"banner_description\">{truncate(movie?.overview,150)}</h1>\r\n                \r\n            </div>\r\n            <div className=\"banner--fadeBottom\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Navbar.css'\r\nfunction Navbar() {\r\n    const [show,handleShow] = useState(false);\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY>100){\r\n                handleShow(true);\r\n            }else{\r\n                handleShow(false);\r\n            }\r\n        });\r\n\r\n        return ()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    },[]);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img \r\n                className=\"nav_logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/7/7a/Logonetflix.png\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n\r\n            <img\r\n                className=\"nav_avatar\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n                alt=\"Netflix Avatar\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Navbar from './Navbar';\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <h1>Hey Somil! Lets build Netflix Clone Front-end today 🚀</h1> */}\n      {/* Nav */}\n      <Navbar/>\n\n      {/* Banner */}\n      <Banner/>\n\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow/>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}